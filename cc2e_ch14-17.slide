軟體建構之道
Code Complete 2nd Edition

第四篇 陳述式
Part IV Statements

March 2017 
Tags: cc2e, software, develop

Author Timothy Liu
timothyliu@91app.com
@Timothy585


# --------------------------------------------------

* Agenda

Chapter 14: Organizing Straight-Line Code . . . . . . . . . . . . . . . . . . . . . . . .347
Chapter 15: Using Conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .355
Chapter 16: Controlling Loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .367
Chapter 17: Unusual Control Structures . . . . . . . . . . . . . . . . . . . . . . . . . . .391

# --------------------------------------------------

* Chapter 14 Organizing Straight-Line Code 組織直線碼

# --------------------------------------------------

* 14.1 Statements That Must Be in a Specific Order 
必須依特定順序排列的陳述式

# --------------------------------------------------

- 相依性

    // Java
    data = ReadData();
    results = CalculateResultsFromData( data );
    PrintResults( results );


- 相依性不明顯

    // Java
    revenue.ComputeMonthly();
    revenue.ComputeQuarterly();
    revenue.ComputeAnnual();

# --------------------------------------------------

* 
- 相依性隱藏

    ' VB
    ComputeMarketingExpense
    ComputeSalesExpense
    ComputeTravelExpense
    ComputePersonnelExpense
    DisplayExpenseSummary

# --------------------------------------------------

* Some simple guidelines for ordering statements
- Organize code so that dependencies are obvious

    InitializeExpenseData   ' 組織程式碼好讓相依性明顯可見
    ComputeMarketingExpense
    ComputeSalesExpense
    ComputeTravelExpense
    ComputePersonnelExpense
    DisplayExpenseSummary

# --------------------------------------------------

- Name routines so that dependencies are obvious

    ComputeMarketingExpenseAndInitializeMemberData ' 命名常式讓相依性明顯可見
    ComputeSalesExpense
    ComputeTravelExpense
    ComputePersonnelExpense
    DisplayExpenseSummary

# --------------------------------------------------

* 
- Use routine parameters to make dependencies obvious
使用常式參數相依性明顯

    expenseData = InitializeExpenseData( expenseData )
    expenseData = ComputeMarketingExpense( expenseData )
    expenseData = ComputeSalesExpense ( expenseData )
    expenseData = ComputeTravelExpense( expenseData )
    expenseData = ComputePersonnelExpense( expenseData )
    expenseData = DisplayExpenseSummary( expenseData )

- Document unclear dependencies with comments
以註解說明不明顯的相依性

    ' Compute expense data. Each of the routines accesses the
    ' member data expenseData. DisplayExpenseSummary
    ' should be called last because it depends on data calculated
    ' by the other routines.
    ...

# --------------------------------------------------

* 14.2 Statements Whose Order Doesn’t Matter
順序不重要的陳述式

    // C++ Example of Bad Code That Jumps Around
    MarketingData marketingData;
    SalesData salesData;
    TravelData travelData;

    travelData.ComputeQuarterly();
    salesData.ComputeQuarterly();
    marketingData.ComputeQuarterly();

    salesData.ComputeAnnual();
    marketingData.ComputeAnnual();
    travelData.ComputeAnnual();

    salesData.Print();
    travelData.Print();
    marketingData.Print();

# --------------------------------------------------

* Making code read from Top to Bottom

    MarketingData marketingData;
    marketingData.ComputeQuarterly();
    marketingData.ComputeAnnual();
    marketingData.Print();

    SalesData salesData;
    salesData.ComputeQuarterly();
    salesData.ComputeAnnual();
    salesData.Print();

    TravelData travelData;
    travelData.ComputeQuarterly();
    travelData.ComputeAnnual();
    travelData.Print();

# --------------------------------------------------

* Grouping Related Statements
相關陳述式分組
.image cc2e/Grouping_Related_Statements.png 327 721

# --------------------------------------------------

* Chapter 15: Using Conditionals

# --------------------------------------------------

* 15.1 if statements
* Write the normal path through the code first; then write the unusual cases 
首先撰寫過程式碼的名目路徑；然後再撰寫異常案例

* Make sure that your branch correctly on equality
務必慎用等號

– Using > instead of >= or < instead of <=

# --------------------------------------------------

* Put the normal case after the if rather than after the else

將正常的 case 置於 if 後方而非 else 後方而

    OpenFile( inputFile, status )
    If ( status = Status_Error ) Then
        errorType = FileOpenError                               'Error case. 
    Else
        ReadFile( inputFile, fileData, status )                 'Nominal case. 
        If ( status = Status_Success ) Then
            SummarizeFileData( fileData, summaryData, status )  'Nominal case. 
            If ( status = Status_Error ) Then
                errorType = ErrorType_DataSummaryError          'Error case. 
            Else
                PrintSummary( summaryData )                     'Nominal case. 
                SaveSummaryData( summaryData, status )
                If ( status = Status_Error ) Then
                    errorType = ErrorType_SummarySaveError      'Error case. 
                Else
                    UpdateAllAccounts()                         'Nominal case. 
                EraseUndoFile()
                    errorType = ErrorType_None
                End If
            End If
        Else
            errorType = ErrorType_FileReadError
        End If
    End If

# --------------------------------------------------

* 建議寫法

    OpenFile( inputFile, status )
    If ( status = Status_Success ) Then
        ReadFile( inputFile, fileData, status )                     'Nominal case. 
        If ( status = Status_Success ) Then
            SummarizeFileData( fileData, summaryData, status )      'Nominal case. 
            If ( status = Status_Success ) Then
                PrintSummary( summaryData )                         'Nominal case. 
                SaveSummaryData( summaryData, status )
                If ( status = Status_Success ) Then
                    UpdateAllAccounts()                             'Nominal case. 
                    EraseUndoFile()
                    errorType = ErrorType_None
                Else
                    errorType = ErrorType_SummarySaveError          'Error case. 
                End If
            Else
                errorType = ErrorType_DataSummaryError              'Error case. 
            End If
        Else
            errorType = ErrorType_FileReadError                     'Error case. 
        End If
    Else
        errorType = ErrorType_FileOpenError                         'Error case. 
    End If

# --------------------------------------------------

* Follow the if clause with a meaningful statement


    if ( SomeTest )
        ;
    else {
        // do something ...
    }

以有意義的陳述式跟隨 if 子句

    if ( ! someTest )
    {
        // do something ...
    }

# --------------------------------------------------

* Consider the else clause
    // if color is valid
    if ( COLOR_MIN <= color && color <= COLOR_MAX ) {
        // do something ...
    }
    else {
        // else color is invalid
        // screen not written to --- safely ignore command
    }
– Test the else clause for correctness
– Check for reversal of the if and else clauses

# --------------------------------------------------

* Chains of if-then-else Statements 鏈式結構
- In languages that don’t support case or only partially

    // C++
    if ( inputCharacter < SPACE ) {
        characterType = CharacterType_ControlCharacter;
    } else if (
        inputCharacter == ' ' || inputCharacter == ',' ||
        inputCharacter == '.' || inputCharacter == '!' ||
        inputCharacter == '(' || inputCharacter == ')' ||
        inputCharacter == ':' || inputCharacter == ';' ||
        inputCharacter == '?' || inputCharacter == '-'
    ){
        characterType = CharacterType_Punctuation;
    } else if ( '0' <= inputCharacter && inputCharacter <= '9' ) {
        characterType = CharacterType_Digit;
    } else if (
        ( 'a' <= inputCharacter && inputCharacter <= 'z' ) ||
        ( 'A' <= inputCharacter && inputCharacter <= 'Z' ) ) {
        characterType = CharacterType_Letter;
    }

# --------------------------------------------------

* 
- Simplify complicated tests with boolean function calls

    if ( IsControl( inputCharacter ) ) {
            characterType = CharacterType_ControlCharacter;
    }
    else if ( IsPunctuation( inputCharacter ) ) {
            characterType = CharacterType_Punctuation;
    }
    else if ( IsDigit( inputCharacter ) ) {
            characterType = CharacterType_Digit;
    }
    else if ( IsLetter( inputCharacter ) ) {
    }

# --------------------------------------------------

* 
- Put the most common cases first

    if ( IsLetter( inputCharacter ) ) {
            characterType = CharacterType_Letter;       // 先置入最常見的案例
    }
    else if ( IsPunctuation( inputCharacter ) ) {
            characterType = CharacterType_Punctuation;
    }
    else if ( IsDigit( inputCharacter ) ) {
            characterType = CharacterType_Digit;
    }
    else if ( IsControl( inputCharacter ) ) {           // 最不常見的測試移至最後
    }

# --------------------------------------------------

* 
- Make sure that all cases are covered

    if ( IsLetter( inputCharacter ) ) {
            characterType = CharacterType_Letter;
    }
    else if ( IsPunctuation( inputCharacter ) ) {
            characterType = CharacterType_Punctuation;
    }
    else if ( IsDigit( inputCharacter ) ) {
            characterType = CharacterType_Digit;
    }
    else if ( IsControl( inputCharacter ) ) {
            characterType = CharacterType_ControlCharacter;
    }
    else {
            DisplayInternalError( "Unexpected type of character detected." );
    }

# --------------------------------------------------

* How about golang?
.play -edit -numbers ./cc2e/if-statement01.go /OMIT START/,/OMIT END/
    
# --------------------------------------------------

* 15.2 case statements

Choosing the most effective ordering of cases 
選擇最有效的 case 排列順序

*** Order cases alphabetically or numerically (如果都一樣重要)
*** Put the normal case first (若有一個正常和多個例外案例)
*** Order cases by frequency (Human readers can find the most common cases easily)


# --------------------------------------------------

* Case statement tips (1)

*** Keep the actions of each case simple (保持案例的動作簡單)
*** Don’t make up phony variables to be able to use the case statement (請勿為了能使用 case 陳述式而編造偽變數)

    // Bad Practice
    action = userCommand[ 0 ];
    switch ( action ) {
        case 'c':
            Copy();
            break;
        case 'd':
            DeleteCharacter();
            break;
        case 'f':
            Format();
            break;
        case 'h':
            Help();
            break;
            ...
        default:
            HandleUserInputError( ErrorType.InvalidUserCommand );
    }

輸入 copy, call, hello 可能和使用者期望不同

# --------------------------------------------------

* Case statement tips (2)

    // Good Practice
    if ( UserCommand.equals( COMMAND_STRING_COPY ) ) {
        Copy();
    }
    else if ( UserCommand.equals( COMMAND_STRING_DELETE ) ) {
        DeleteCharacter();
    }
    else if ( UserCommand.equals( COMMAND_STRING_FORMAT ) ) {
        Format();
    }
    else if ( UserCommand.equals( COMMAND_STRING_HELP ) ) {
        Help();
    }
    ...
    else {
        HandleUserInputError( ErrorType_InvalidCommandInput );
    }
    
# --------------------------------------------------

* How about golang?
.play -edit ./cc2e/switch-statement01.go /OMIT START/,/OMIT END/
    
# --------------------------------------------------

* Use the default clause only to detect legitimate defaults 
僅使用預設子句偵測合法的預設值

*不智的行為*

* Use the default clause to detect errors
使用預設子句偵測錯誤

    switch ( commandShortcutLetter ) {
        case 'a':
            PrintAnnualReport();
            break;
            ...
        default:
            DisplayInternalError( "Internal Error 905: Call customer support." );
    }

# --------------------------------------------------

* In C++ and Java, avoid dropping through the end of a case statement
在 C++ 和 Java 中，請避免省略 case 陳述式的結尾

    switch ( InputVar ) {
        case 'A':   if ( test ) {
                            // statement 1
                            // statement 2
        case 'B':           // statement 3
                            // statement 4
                        ...
                    } 
                ...
            break; 
        ...
    }

# --------------------------------------------------

* In C++, clearly and unmistakably identify flow-throughs at the end of a case statement
在 C++ 中，正確無誤地標示出 case 陳述式結尾的串流直通程序

    class Main {    
        public static void main(String[] args) {
            String ResponseValue = "No or Yes";
            switch(ResponseValue) {
                default:
                case "No":
                    System.out.println("No");
                case "Yes":
                    System.out.println("Yes");
            }            
        }
    }

[[https://repl.it/GHgf/0][run it!]]
[[https://repl.it/languages/java][Java playground]]

* 這裏可以用 iframe
//.iframe https://repl.it/GHgf/0 600 1000

# --------------------------------------------------

* 建議寫法
    switch ( errorDocumentationLevel ) {
        case DocumentationLevel_Full:
            DisplayErrorDetails( errorNumber );
            // FALLTHROUGH -- Full documentation also prints summary comments
        case DocumentationLevel_Summary:
            DisplayErrorSummary( errorNumber );
            // FALLTHROUGH -- Summary documentation also prints error number
        case DocumentationLevel_NumberOnly:
            DisplayErrorNumber( errorNumber );
            break;
        default:
            DisplayInternalError( "Internal Error 905: Call customer support." );
    }

# --------------------------------------------------

* How about golang?
.play -edit ./cc2e/switch-statement02.go /OMIT START/,/OMIT END/
    
# --------------------------------------------------

* Chapter 16: Controlling Loops

# --------------------------------------------------

* The Kinds of Loops

.image cc2e/The_Kinds_of_Loops.png 

# --------------------------------------------------

* When to use a while loop

剛開始寫程式的程式設計師有時會誤以為 while 迴圈會不斷被評估，只要 while 的條件式不成立，就會立即終結。 

Use a while loop if you don’t know ahead of time exactly how many times you want to loop 
如果你事前不知道迴圈要重覆多少次，便應該使用 While 迴圈 

- Loop with test at the beginning 前測式迴圈
- Loop with test at the end 後測式迴圈
- >> do-while in C++, C# and Java 
- >> do-loop-while in VB

# --------------------------------------------------

* When to use a Loop-With-Exit loop
- A loop in which the exit condition appears in the middle of the loop

    // Compute scores and ratings. The code uses an infinite loop
    // and a break statement to emulate a loop-with-exit loop.
    score = 0;
    while ( true ) {
        GetNextRating( &ratingIncrement );
        rating = rating + ratingIncrement;
        if ( !( ( score < targetScore ) && ( ratingIncrement != 0 ) ) ) {
            break;
        }
        GetNextScore( &scoreIncrement );
        score = score + scoreIncrement;
    }

此結構更符合一般人對重複性控制方式的思考概念

# --------------------------------------------------

* Abnormal Loop-With-Exit loops

下列易導致錯亂

    goto Start;
    while ( expression ) {
        // do something
        ...
        Start:
        // do something else
        ... 
    }

在不使用 goto, C++ 另一種寫法

    while ( true ) {
        // do something else
        ...
        if ( !( expression ) ) {
            break;
        }
        // do something
        ...
    }

# --------------------------------------------------

* When to use a for loop

- A loop that executes a specified number of times (當你需要能執行一定次數的迴圈時的選擇)

- Simple activities that don’t require internal loop controls

- >> Simple increments or simple decrements

- Use while loop instead if you have a condition that the execution has to jump out of a loop  (大部份複雜的迴圈工作由 while 來處理較好)

- Don’t explicitly change the index value (勿直接修改索引值來強制迴圈結束)

# --------------------------------------------------

* Controlling the Loop
- Minimize the number of factors that affect the loop 

- Treat the inside of the loop as if it were a routine

- Think of a loop as a black box

.image cc2e/loop-black-box.png

使用 while ( true )-break 會少掉此優勢
 
# --------------------------------------------------

* Entering the loop

- Enter the loop from one location only (單一位置進入迴圈)

- Put initialization code directly before the loop (初始化程式，置於迴圈前)

- Use while(true) for infinite loops

    for(;;)

- Prefer for loops when they’re appropriate (盡可能使用 for 迴圈)

- Don’t use a for loop when a while loop is more appropriate

    // read all the records from a file
    for ( inputFile.MoveToStart(), recordCount = 0; !inputFile.EndOfFile(); recordCount++ ) {
        inputFile.GetRecord();
    }

將 while 迴圈硬塞到 For 迴圈標頭中的情況

# --------------------------------------------------

* Processing the Middle of the loop (1/2)

- Use { and } to enclose the statements in the loop 

- Avoid empty loops

    // avoid
    while ( ( inputChar = dataFile.GetChar() ) != CharType_Eof ) {
        ;
    }

    // better
    do {
        inputChar = dataFile.GetChar();
    } while ( inputChar != CharType_Eof );

* Processing the Middle of the loop (2/2)

- Keep loop-housekeeping chores at either the beginning or the end
將迴圈內部管理雜務留在迴圈的開頭或結尾處

    nameCount = 0;
    totalLength = 0;
    while ( !inputFile.EndOfFile() ) {
        // do the work of the loop
        inputFile >> inputString;
        names[ nameCount ] = inputString;
        ...
        // prepare for next pass through the loop--housekeeping
        nameCount++;
        totalLength = totalLength + inputString.length();
    }

- Make each loop perform only one function
讓各迴圈只執行一項功能

# --------------------------------------------------

* Exiting the loop (1/2)

- Assure yourself that the loop ends (確定迴圈可以結束)

- Make loop-termination conditions obvious (闡明讓迴圈終結的條件式)

- Don’t monkey with the look index!

    for ( int i = 0; i < 100; i++ ) {
        // some code
        ...
        if ( ... ) {
            i = 100;    // 外行做法
        }
        // more code
        ... 
    }

# --------------------------------------------------

* Exiting the loop (2/2)

- Avoid code that depends on the loop index’s final value (別依賴迴圈索引的最終數值)

    // 較好的作法
    found = false;
    for ( recordCount = 0; recordCount < MAX_RECORDS; recordCount++ ) {
        if ( entry[ recordCount ] == testValue ) {
            found = true;
            break;
        }
    }
    ...
    return( found );

- Consider using safety counter

    safetyCounter++;
    if ( safetyCounter >= SAFETY_LIMIT ) {
        Assert( false, "Internal Error: Safety-Counter Violation." );
    }

# --------------------------------------------------

* Exiting loops early

- Consider using break statements rather than boolean flags in a while loop

- Be wary of a loop with a lot of breaks scattered through it

- Use continue for tests at the top of a loop

- Use the labeled break structure if your language supports it

    do { ...
    switch ...
            CALL_CENTER_DOWN:
    if () { ...
                break CALL_CENTER_DOWN;
    ... }
            ...
    } while ( ... );

- Use break and continue only with caution

# --------------------------------------------------

* Using loop variables

- Use ordinal or enumerated types for limits on both arrays and loops 

- Use meaningful variables names to make nested loops readable

    for ( int payCodeIdx = 0; payCodeIdx < numPayCodes; payCodeIdx++ ) {
        for (int month = 0; month < 12; month++ ) {
            for ( int divisionIdx = 0; divisionIdx < numDivisions; divisionIdx++ ) {
                sum = sum + transaction[ month ][ payCodeIdx ][ divisionIdx ];
            }
        }
    }

# --------------------------------------------------

* Using loop variables

- Use meaningful names to avoid loop-index cross-talk

    for ( i = 0; i < numPayCodes; i++ ) {
        // lots of code
        ...
        for ( j = 0; j < 12; j++ ) {
            // lots of code
            ...
            for ( i = 0; i < numDivisions; i++ ) {
                sum = sum + transaction[ j ][ i ][ k ];
            }
        } 
    }

- Limit the scope of loop-index variables to the loop itself

    for ( int recordCount = 0; recordCount < MAX_RECORDS; recordCount++ ) {
        // looping code that uses recordCount
    }
    // intervening code
    for ( int recordCount = 0; recordCount < MAX_RECORDS; recordCount++ ) {
        // additional looping code that uses a different recordCount
    }

# --------------------------------------------------

* How Long should a loop be?

- Make your loops short enough to view all at once 

- Limit nesting to three levels

- >> Move loop innards of long loops into routines (將長型迴圈的內容移動到常式中)

- Make long loops especially clear (注意保持長型迴圈的透明度)

# --------------------------------------------------

* golang 只有 for 一種，但幾乎通吃
.play -edit ./cc2e/loop-statement01.go /OMIT START/,/OMIT END/

# --------------------------------------------------

* Chapter 17: Unusual Control Structures

# --------------------------------------------------

* Multiple Returns from a routine

- Use a return when it enhances readability

    Comparison Compare( int value1, int value2 ) {
        if ( value1 < value2 ) {
            return Comparison_LessThan;
        }
        else if ( value1 > value2 ) {
            return Comparison_GreaterThan;
        }
        return Comparison_Equal;
    }

# --------------------------------------------------

* Multiple Returns from a routine

- Use guard clauses (early return or exists) to simplify complex error processing

    ' set up, bailing out if errors are found
    If Not file.validName() Then
        errorStatus = FileError_InvalidFileName
        Exit Sub
    End If
    If Not file.Open() Then
        errorStatus = FileError_CantOpenFile
        Exit Sub
    End If
    If Not encryptionKey.valid() Then
        errorStatus = FileError_InvalidEncryptionKey
        Exit Sub
    End If
    If Not file.Decrypt( encryptionKey ) Then
        errorStatus = FileError_CantDecryptFile
        Exit Sub
    End If
    This is the code for the
    nominal case.
    ' lots of code
    ...

# --------------------------------------------------

* Recursion
- A routine solves a small part of a problem itself, divides the problem into smaller pieces, and then calls itself to solve each of the smaller pieces
常式可解決問題本身的一小部份，將該問題分解成數個更小塊的問題，然後呼叫自已解決每個分解出來的小問題。
 
    void QuickSort( int firstIndex, int lastIndex, String [] names ) {
        if ( lastIndex > firstIndex ) {
            int midPoint = Partition( firstIndex, lastIndex, names );
            QuickSort( firstIndex, midPoint-1, names );
            QuickSort( midPoint+1, lastIndex, names )
        } 
    }

[[http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html][js]]
[[https://swizec.com/blog/are-map-reduce-and-filter-turing-complete/swizec/6341][js+mapreduce]]

# --------------------------------------------------

* Recursion Tips
- Make sure the recursion stops
– >> AlreadyTried(), ThisIsThe Exit()
- Make safety counters to prevent infinite recursion
    Public Sub RecursiveProc( ByRef safetyCounter As Integer )
        If ( safetyCounter > SAFETY_LIMIT ) Then
            Exit Sub
        End If
        safetyCounter = safetyCounter + 1
        ...
        RecursiveProc( safetyCounter )
    End Sub

- Limit recursion to one routine
- Keep an eye on the stack
- Don’t use recursion for factorials or Fibonacci numbers

# --------------------------------------------------

* goto

別用，降低可讀性，可能也沒得用 (java)

golang 1.6 出現 1000+， 在性能優先的場合，能發揮積極作用。

# --------------------------------------------------

* reference
- [[https://github.com/JosephBuchma/Go-Present-code-highlighter][Chrome extension for supporting go present code syntax color]]
- 安裝 go present

    $> go get -u -v golang.org/x/tools/cmd/present
    $> go install golang.org/x/tools/cmd/present

- 執行 present 指令

    $> present

- 至瀏覽器【[[http://127.0.0.1:3999][http://127.0.0.1:3999]]】點選【xxx.slide】進行投影片投放
# --------------------------------------------------